import { DynamicModule } from '@nestjs/common';
import { Injectable } from '@nestjs/common/interfaces/injectable.interface';
import { Type } from '@nestjs/common/interfaces/type.interface';
import { ApplicationConfig } from '../application-config';
import { Module } from './module';
import { ModulesContainer } from './modules-container';
export declare class NestContainer {
    private readonly _applicationConfig;
    private readonly globalModules;
    private readonly moduleCompiler;
    private readonly modules;
    private readonly dynamicModulesMetadata;
    private readonly internalProvidersStorage;
    private internalCoreModule;
    constructor(_applicationConfig?: ApplicationConfig);
    readonly applicationConfig: ApplicationConfig | undefined;
    setHttpAdapter(httpAdapter: any): void;
    getHttpAdapterRef(): import("..").AbstractHttpAdapter<any, any, any>;
    addModule(metatype: Type<any> | DynamicModule | Promise<DynamicModule>, scope: Type<any>[]): Promise<Module>;
    addDynamicMetadata(token: string, dynamicModuleMetadata: Partial<DynamicModule>, scope: Type<any>[]): void;
    addDynamicModules(modules: any[], scope: Type<any>[]): void;
    isGlobalModule(metatype: Type<any>): boolean;
    addGlobalModule(module: Module): void;
    getModules(): ModulesContainer;
    getModuleByKey(moduleKey: string): Module;
    getInternalCoreModuleRef(): Module | undefined;
    addImport(relatedModule: Type<any> | DynamicModule, token: string): Promise<void>;
    addProvider(provider: Type<any>, token: string): string;
    addInjectable(injectable: Type<any>, token: string, host: Type<Injectable>): void;
    addExportedProvider(provider: Type<any>, token: string): void;
    addController(controller: Type<any>, token: string): void;
    clear(): void;
    replace(toReplace: any, options: any & {
        scope: any[] | null;
    }): void;
    bindGlobalScope(): void;
    bindGlobalsToImports(module: Module): void;
    bindGlobalModuleToModule(target: Module, globalModule: Module): void;
    getDynamicMetadataByToken(token: string, metadataKey: keyof DynamicModule): any[];
    createCoreModule(): DynamicModule;
    registerCoreModuleRef(moduleRef: Module): void;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_utils_1 = require("@nestjs/common/utils/shared.utils");
const unknown_element_exception_1 = require("../errors/exceptions/unknown-element.exception");
class ContainerScanner {
    constructor(container) {
        this.container = container;
    }
    find(typeOrToken) {
        this.initFlatContainer();
        return this.findInstanceByPrototypeOrToken(typeOrToken, this.flatContainer);
    }
    findInstanceByPrototypeOrToken(metatypeOrToken, contextModule) {
        const dependencies = new Map([
            ...contextModule.providers,
            ...contextModule.controllers,
            ...contextModule.injectables,
        ]);
        const name = shared_utils_1.isFunction(metatypeOrToken)
            ? metatypeOrToken.name
            : metatypeOrToken;
        const instanceWrapper = dependencies.get(name);
        if (!instanceWrapper) {
            throw new unknown_element_exception_1.UnknownElementException();
        }
        return instanceWrapper.instance;
    }
    initFlatContainer() {
        if (this.flatContainer) {
            return;
        }
        const modules = this.container.getModules();
        const initialValue = {
            providers: [],
            controllers: [],
            injectables: [],
        };
        const merge = (initial, arr) => [...initial, ...arr];
        this.flatContainer = [...modules.values()].reduce((current, next) => ({
            providers: merge(current.providers, next.providers),
            controllers: merge(current.controllers, next.controllers),
            injectables: merge(current.injectables, next.injectables),
        }), initialValue);
    }
}
exports.ContainerScanner = ContainerScanner;
